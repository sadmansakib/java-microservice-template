plugins {
    id 'java'
    id 'org.springframework.boot'
    id 'io.spring.dependency-management'
    id "org.sonarqube"
    id "jacoco"
    id "com.google.cloud.tools.jib"
}

sonarqube {
    properties {
        property "sonar.host.url", "${sonarUrl}"
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.projectName", "${project.name}"
        property "sonar.projectKey", "${project.name}"
        property "sonar.login", "${sonarToken}"
    }
}

subprojects {
    apply {
        plugin('java')
        plugin('io.spring.dependency-management')
        plugin('org.springframework.boot')
        plugin('org.sonarqube')
        plugin('com.google.cloud.tools.jib')

        from('../gradle/docker.gradle')
    }

    sonarqube {
        properties {
            property "sonar.sources", "src/main"
            property "sonar.tests", "src/test"
            property "sonar.coverage.jacoco.xmlReportPaths", "../build/reports/jacoco/codeCoverageReport/codeCoverageReport.xml"
            property 'sonar.java.codeCoveragePlugin', 'jacoco'
            property "sonar.host.url", "${sonarUrl}"
        }
    }

    dependencies {
        implementation 'org.springframework.cloud:spring-cloud-starter'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        implementation 'org.springframework.cloud:spring-cloud-starter-bootstrap'
        annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
        implementation 'org.springframework.boot:spring-boot-starter-cache'
        implementation "com.github.ben-manes.caffeine:caffeine:${caffeineCacheVersion}"

        if (project.name != "service-discovery"){
            implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
        }

        if (project.name != "config-server" && project.name != "service-discovery"){
            implementation 'org.springframework.cloud:spring-cloud-starter-config'
            implementation 'org.springframework.boot:spring-boot-starter-actuator'
        }
    }
}

allprojects {
    group = 'org.example'
    version = '1.0-SNAPSHOT'

    repositories {
        mavenLocal()
        mavenCentral()
    }

    ext {
        set('springCloudVersion', "2022.0.2")
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
    }

    dependencies {
        testImplementation platform('org.junit:junit-bom:5.9.1')
        testImplementation 'org.junit.jupiter:junit-jupiter'
    }

    test {
        useJUnitPlatform()
    }

    tasks.withType(JavaCompile).tap {
        configureEach {
            options.encoding = 'UTF-8'
        }
    }
}